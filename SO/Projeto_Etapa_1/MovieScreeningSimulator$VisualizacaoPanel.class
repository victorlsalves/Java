// Source code is decompiled from a .class file using FernFlower decompiler.
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.Timer;

class MovieScreeningSimulator$VisualizacaoPanel extends JPanel implements ActionListener {
   private final List<MovieScreeningSimulator$Fan> fansToDraw;
   public static final int AREA_AUDITORIO_X = 70;
   public static final int AREA_LANCHONETE_X = 480;
   public static final int AREA_FILA_X = 275;
   public static final int AREA_Y_START_TOP = 70;
   private static final int AREA_Y_BOTTOM = 320;
   private static final int IMAGE_TARGET_WIDTH = 45;
   private static final int IMAGE_TARGET_HEIGHT = 60;
   private static final int Y_SPACING = 60;
   public static final int PONTO_ENTRADA_X = 275;
   public static final int PONTO_ENTRADA_Y = 220;
   private Timer animationTimer;
   private static final int MOVEMENT_SPEED = 3;
   private static final int ANIMATION_DELAY = 60;
   private BufferedImage panelBackgroundImage;

   public MovieScreeningSimulator$VisualizacaoPanel(final MovieScreeningSimulator var1, BufferedImage var2) {
      this.this$0 = var1;
      this.fansToDraw = Collections.synchronizedList(new ArrayList());
      this.panelBackgroundImage = var2;
      this.setPreferredSize(new Dimension(600, 450));
      if (this.panelBackgroundImage == null) {
         this.setBackground(new Color(20, 20, 20));
      }

      this.animationTimer = new Timer(60, this);
      this.animationTimer.start();
   }

   public void addFanSprite(MovieScreeningSimulator$Fan var1) {
      synchronized(this.fansToDraw) {
         this.fansToDraw.add(var1);
         this.assignInitialFanPosition(var1);
         var1.setMoving(true);
      }

      this.repaint();
   }

   private void assignInitialFanPosition(MovieScreeningSimulator$Fan var1) {
      int var2 = 0;
      synchronized(this.fansToDraw) {
         Iterator var4 = this.fansToDraw.iterator();

         while(true) {
            if (!var4.hasNext()) {
               break;
            }

            MovieScreeningSimulator$Fan var5 = (MovieScreeningSimulator$Fan)var4.next();
            if (var5 != var1 && "Na fila".equals(var5.getVisualStatus()) && (var5.targetX == 275 && var5.targetY >= 320 || !var5.isMoving() && var5.x == 275 && var5.y >= 320)) {
               ++var2;
            }
         }
      }

      var1.targetX = 275;
      var1.targetY = 320 + var2 * 60;
      if (var1.x == var1.targetX && var1.y == var1.targetY) {
         var1.setMoving(false);
      } else {
         var1.setMoving(true);
      }

   }

   public void removeFanSprite(MovieScreeningSimulator$Fan var1) {
      synchronized(this.fansToDraw) {
         this.fansToDraw.remove(var1);
      }

      this.repaint();
   }

   public void clearFans() {
      synchronized(this.fansToDraw) {
         this.fansToDraw.clear();
      }

      this.repaint();
   }

   public void setFanTargetPosition(MovieScreeningSimulator$Fan var1) {
      this.assignFanPositionBasedOnStatus(var1);
      if (var1.x != var1.targetX || var1.y != var1.targetY) {
         var1.setMoving(true);
      }

   }

   private int countFansInArea(List<MovieScreeningSimulator$Fan> var1, String var2) {
      int var3 = 0;
      Iterator var4 = var1.iterator();

      while(var4.hasNext()) {
         MovieScreeningSimulator$Fan var5 = (MovieScreeningSimulator$Fan)var4.next();
         if (var2.equals(var5.getVisualStatus())) {
            ++var3;
         }
      }

      return var3;
   }

   private void assignFanPositionBasedOnStatus(MovieScreeningSimulator$Fan var1) {
      String var2 = var1.getVisualStatus();
      if (var2 != null) {
         ArrayList var3;
         synchronized(this.fansToDraw) {
            var3 = new ArrayList(this.fansToDraw);
         }

         int var4 = 0;
         Iterator var5 = var3.iterator();

         while(var5.hasNext()) {
            MovieScreeningSimulator$Fan var6 = (MovieScreeningSimulator$Fan)var5.next();
            if (var6 != var1 && var2.equals(var6.getVisualStatus())) {
               ++var4;
            }
         }

         switch (var2) {
            case "Na fila":
               var1.visible = true;
               var1.targetX = 275;
               var1.targetY = 320 + var4 * 60;
               break;
            case "Aguardando filme":
            case "Assistindo filme":
               var1.visible = false;
               var1.targetX = 70;
               var1.targetY = 70 + var4 * 60;
               break;
            case "Saindo para lanchar":
            case "Lanchando":
               var1.visible = true;
               var1.targetX = 480;
               var1.targetY = 70 + var4 * 60;
               break;
            default:
               var1.visible = false;
               var1.targetX = -95;
               var1.targetY = -110;
         }

      }
   }

   public void actionPerformed(ActionEvent var1) {
      boolean var2 = false;
      ArrayList var3;
      synchronized(this.fansToDraw) {
         var3 = new ArrayList(this.fansToDraw);
      }

      Iterator var4 = var3.iterator();

      while(true) {
         while(var4.hasNext()) {
            MovieScreeningSimulator$Fan var5 = (MovieScreeningSimulator$Fan)var4.next();
            if (var5.isMoving() && (var5.x != var5.targetX || var5.y != var5.targetY)) {
               var2 = true;
               if (var5.x < var5.targetX) {
                  var5.x = Math.min(var5.x + 3, var5.targetX);
               } else if (var5.x > var5.targetX) {
                  var5.x = Math.max(var5.x - 3, var5.targetX);
               }

               if (var5.y < var5.targetY) {
                  var5.y = Math.min(var5.y + 3, var5.targetY);
               } else if (var5.y > var5.targetY) {
                  var5.y = Math.max(var5.y - 3, var5.targetY);
               }

               if (var5.x == var5.targetX && var5.y == var5.targetY) {
                  var5.setMoving(false);
               }
            } else if (var5.isMoving()) {
               var5.setMoving(false);
            }
         }

         if (var2) {
            this.repaint();
         }

         return;
      }
   }

   protected void paintComponent(Graphics var1) {
      super.paintComponent(var1);
      Graphics2D var2 = (Graphics2D)var1;
      if (this.panelBackgroundImage != null) {
         var2.drawImage(this.panelBackgroundImage, 0, 0, this.getWidth(), this.getHeight(), this);
      } else {
         var2.setColor(new Color(20, 20, 20));
         var2.fillRect(0, 0, this.getWidth(), this.getHeight());
      }

      var2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      var2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
      var2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
      if (this.this$0.N_CAPACITY > 0) {
         var2.setColor(Color.ORANGE);
         var2.setFont(new Font("SansSerif", 1, 18));
         String var3 = "Audit√≥rio: " + this.this$0.currentFanCountInAuditorium + "/" + this.this$0.N_CAPACITY;
         FontMetrics var4 = var2.getFontMetrics();
         var2.drawString(var3, 70, 70 - var4.getDescent() - 10);
      }

      ArrayList var7;
      synchronized(this.fansToDraw) {
         var7 = new ArrayList(this.fansToDraw);
      }

      Iterator var8 = var7.iterator();

      while(true) {
         while(var8.hasNext()) {
            MovieScreeningSimulator$Fan var5 = (MovieScreeningSimulator$Fan)var8.next();
            if (var5 != null && var5.visible && var5.image != null) {
               var2.drawImage(var5.image, var5.x, var5.y, 45, 60, this);
            } else if (var5 != null && var5.image == null) {
               var2.setColor(Color.DARK_GRAY);
               var2.fillRect(var5.x, var5.y, 45, 60);
            }
         }

         return;
      }
   }
}
